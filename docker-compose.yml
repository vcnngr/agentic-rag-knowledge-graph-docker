services:
  # PostgreSQL database con estensione pgvector
  postgres:
    image: pgvector/pgvector:pg16
    container_name: agentic-rag-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-agentic_rag}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Mount SQL files directly in the init directory
      - ./sql:/docker-entrypoint-initdb.d:ro
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-agentic_rag}"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s
    networks:
      - agentic-rag-network

  # Neo4j database per knowledge graph
  neo4j:
    image: neo4j:5.15-community
    container_name: agentic-rag-neo4j
    environment:
      NEO4J_AUTH: ${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD:-password}
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: "gds.*,apoc.*"
      NEO4J_dbms_security_procedures_allowlist: "gds.*,apoc.*"
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_apoc_import_file_use__neo4j__config: "true"
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "${NEO4J_USER:-neo4j}", "-p", "${NEO4J_PASSWORD:-password}", "RETURN 1"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 180s
    networks:
      - agentic-rag-network

  # Applicazione Agentic RAG
  agentic-rag:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agentic-rag-app
    environment:
      # Database connections
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-agentic_rag}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DB: ${POSTGRES_DB:-agentic_rag}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      
      # Neo4j connection
      NEO4J_URI: ${NEO4J_URI:-bolt://neo4j:7687}
      NEO4J_USER: ${NEO4J_USER:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-password}
      
      # Redis connection (opzionale)
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      
      # LLM Provider Configuration
      LLM_PROVIDER: ${LLM_PROVIDER:-openai}
      LLM_BASE_URL: ${LLM_BASE_URL:-https://api.openai.com/v1}
      LLM_API_KEY: ${LLM_API_KEY}
      LLM_CHOICE: ${LLM_CHOICE:-gpt-4o-mini}
      
      # Embedding Provider Configuration
      EMBEDDING_PROVIDER: ${EMBEDDING_PROVIDER:-openai}
      EMBEDDING_BASE_URL: ${EMBEDDING_BASE_URL:-https://api.openai.com/v1}
      EMBEDDING_API_KEY: ${EMBEDDING_API_KEY:-${LLM_API_KEY}}
      EMBEDDING_MODEL: ${EMBEDDING_MODEL:-text-embedding-3-small}
      
      # Ingestion-specific LLM
      INGESTION_LLM_CHOICE: ${INGESTION_LLM_CHOICE:-${LLM_CHOICE:-gpt-4o-mini}}
      
      # Application Configuration
      APP_ENV: ${APP_ENV:-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      API_HOST: ${APP_HOST:-0.0.0.0}
      API_PORT: ${APP_PORT:-8058}
      APP_HOST: ${APP_HOST:-0.0.0.0}
      APP_PORT: ${APP_PORT:-8058}
      
      # Chunking Configuration
      CHUNK_SIZE: ${CHUNK_SIZE:-800}
      CHUNK_OVERLAP: ${CHUNK_OVERLAP:-150}
      MAX_CHUNK_SIZE: ${MAX_CHUNK_SIZE:-1500}
      
      # Vector Search Configuration
      VECTOR_DIMENSION: ${VECTOR_DIMENSION:-1536}
      MAX_SEARCH_RESULTS: ${MAX_SEARCH_RESULTS:-10}
      
      # Session Configuration
      SESSION_TIMEOUT_MINUTES: ${SESSION_TIMEOUT_MINUTES:-60}
      MAX_MESSAGES_PER_SESSION: ${MAX_MESSAGES_PER_SESSION:-100}
      
      # Rate Limiting
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-60}
      RATE_LIMIT_WINDOW_SECONDS: ${RATE_LIMIT_WINDOW_SECONDS:-60}
      
      # File Processing
      MAX_FILE_SIZE_MB: ${MAX_FILE_SIZE_MB:-10}
      ALLOWED_FILE_EXTENSIONS: ${ALLOWED_FILE_EXTENSIONS:-.md,.txt}
      
      # Debug Configuration
      DEBUG_MODE: ${DEBUG_MODE:-false}
      ENABLE_PROFILING: ${ENABLE_PROFILING:-false}
      
      # Legacy environment variables (per compatibilit√†)
      ENVIRONMENT: ${APP_ENV:-production}
      OPENAI_API_KEY: ${LLM_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
    ports:
      - "${APP_PORT:-8058}:${APP_PORT:-8058}"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./documents:/app/documents
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks:
      - agentic-rag-network
    restart: unless-stopped

  # Redis per caching (opzionale - usare con --profile production)
  redis:
    image: redis:7-alpine
    container_name: agentic-rag-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - agentic-rag-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production  # Redis viene avviato solo con il profilo production

  # Nginx reverse proxy (opzionale - usare con --profile production)
  nginx:
    image: nginx:alpine
    container_name: agentic-rag-nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - agentic-rag
    networks:
      - agentic-rag-network
    restart: unless-stopped
    profiles:
      - production  # Nginx viene avviato solo con il profilo production

volumes:
  postgres_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  redis_data:
    driver: local

networks:
  agentic-rag-network:
    driver: bridge
